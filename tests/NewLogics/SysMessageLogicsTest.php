<?php

namespace Tests\NewLogics;

use App\Models\Assets;
use App\Models\CaseDetails;
use App\Models\Coins;
use App\Models\GiftDetails;
use App\Models\JackpotsHasUsers;
use App\Models\PledgeProfits;
use App\Models\Users;
use App\NewLogics\SysMessageLogics;
use App\NewServices\CoinServices;
use App\NewServices\UsersServices;
use App\NewServices\VipsServices;
use Tests\TestCase;

class SysMessageLogicsTest extends TestCase
{
    private Users $user;
    private Coins $usdc;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = UsersServices::GetById(2);
        $this->usdc = CoinServices::GetUSDC();
    }

    public function testAirdrop()
    {
        $jackpotHasUser = new JackpotsHasUsers();
        $jackpotHasUser->id = 1;
        $jackpotHasUser->airdrop = 323.0023;
        $jackpotHasUser->rank = 32;
        SysMessageLogics::Airdrop($this->user, $jackpotHasUser, $this->usdc);

    }

    public function testAddFriend()
    {
        SysMessageLogics::AddFriend($this->user, $this->user);
    }

    public function testGiftReceived()
    {
        $giftDetail = new GiftDetails();
        $giftDetail->id = 1;
        $giftDetail->from_users_id = 1;
        $giftDetail->amount = 123.032;
        SysMessageLogics::GiftReceived($this->user, $giftDetail, $this->usdc);
    }

    public function testGiftHasReceived()
    {

    }

    public function testResumeOrder()
    {
        $profit = new PledgeProfits();
        $profit->id = 1;
        $profit->round = 12;
        $profit->deposit_total_amount = 1389.02;
        $profit->deposit_loyalty_amount = 389.02;
        $profit->deposit_staking_amount = 1000;

        $user = UsersServices::GetById(1);
        SysMessageLogics::ResumeOrder($user, $profit, $this->usdc);
    }

    public function testSupportAnswered()
    {
        $caseDetail = new CaseDetails();
        $caseDetail->id = 1;
        $caseDetail->answer = "hahhaha this is the answer";
        SysMessageLogics::SupportAnswered($this->user, $caseDetail);
    }

    public function testIdentityVerify()
    {
        SysMessageLogics::IdentityVerify($this->user);
    }

    public function testFriendHelpWithdrawal()
    {
        $pending = new Assets();
        $pending->balance = 15.32;
        $pending->pending_fee = 13;
        SysMessageLogics::FriendHelpWithdrawal($this->user, $pending, $this->user);
    }

    public function testWithdrawal()
    {
        $pending = new Assets();
        $pending->balance = 15.32;
        $pending->pending_fee = 13;
        SysMessageLogics::Withdrawal($this->user, $pending, $this->usdc);
    }

    public function testPledgeMessage()
    {
        $profit = new PledgeProfits();
        $profit->id = 1;
        $profit->round = 12;
        $profit->actual_income = 1389.02;
        SysMessageLogics::PledgeMessage($this->user, $profit, $this->usdc);
    }

    public function testProfileVerify()
    {
        SysMessageLogics::ProfileVerify($this->user);
    }

    public function testWithdrawalInvite()
    {
        $pending = new Assets();
        $pending->id = 1;
        $pending->balance = 15.32;
        $pending->pending_fee = 13;
        $from = UsersServices::GetById(2);
        $to = UsersServices::GetById(1);
        SysMessageLogics::WithdrawalInvite($from, $to, $pending);
    }

    public function testVipUpgrade()
    {
        $vip = VipsServices::GetById(2);
        SysMessageLogics::VipUpgrade($this->user, $vip);
    }

    public function testProfileVerifyFailed()
    {
        $this->user->profile_error_message = '1';
        SysMessageLogics::ProfileVerifyFailed($this->user);
    }

    public function testIdentityVerifyFailed()
    {
        $this->user->identity_error_message = '2';
        SysMessageLogics::IdentityVerifyFailed($this->user);
    }

    public function testSendFriendMessage()
    {
        $from = UsersServices::GetById(2);
        $to = UsersServices::GetById(1);
        SysMessageLogics::SendFriendMessage($from, $to, 'hello');
    }
}
